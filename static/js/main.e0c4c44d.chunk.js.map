{"version":3,"sources":["Attribution.js","Question.js","App.js","reportWebVitals.js","index.js"],"names":["Attribution","number","rootDir","ids","Array","from","keys","useState","value","setValue","React","useEffect","a","attribution","d3","attribution_spec","w","h","attr","style","classed","selectAll","remove","append","data","enter","d","slice","parseInt","drawGrid","className","id","min","max","variant","onChange","changeEvent","target","Question","setAnswer","itemClick","this","svg","on","App","rootDirs","map","item","expRootDir","questionNum","length","reduce","acc","curr","totalInfo","setTotalInfo","defaultInfo","userInfo","setUserInfo","updateInfoToggle","prevState","includes","filter","updateUserInfo","key","event","Object","console","log","width","type","onClick","notOK","forEach","push","content","fileName","contentType","document","createElement","file","Blob","href","URL","createObjectURL","download","click","JSON","stringify","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e0c4c44d.chunk.js","sourcesContent":["import './Question.css';\r\nimport React, { useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport 'react-bootstrap';\r\n\r\nfunction Attribution({number,rootDir}) {\r\n  let ids = Array.from(Array(9).keys());\r\n  const [value, setValue] = useState(1);\r\n\r\n  function setResult(event){\r\n\r\n  }\r\n\r\n  React.useEffect(() => {\r\n\r\n\r\n    async function drawGrid() {\r\n      // TODO draw the map using d3\r\n\r\n      const attribution = d3\r\n      .selectAll(`#attribution_${number}`);\r\n      let attribution_spec = {\r\n        w : 90,\r\n        h: 80\r\n      }\r\n\r\n      attribution\r\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n        .style(\"background-color\", \"transparent\")\r\n        .attr(\"viewBox\", `0 0 ${attribution_spec.w} ${attribution_spec.h}`)\r\n        .classed(\"svg-content\", true)\r\n        .selectAll('*').remove();\r\n\r\n      attribution\r\n        .append(\"defs\")\r\n        .selectAll(\"pattern\")\r\n        .data(ids)\r\n        .enter()\r\n        .append('pattern')\r\n        .attr(\"id\", (d)=>`att_${number}_${d}`)\r\n        .attr(\"width\",\"100%\")\r\n        .attr('height',\"100%\")\r\n        .attr(\"patternContentUnits\", \"objectBoundingBox\")\r\n        .append(\"image\")\r\n        .attr(\"height\",\"1\") // value is ratio : \"image height /pattern height\"\r\n        .attr(\"width\",\"1\") // value is ratio : \"image widht /pattern width\"\r\n        .attr(\"xlink:href\", // use square size image\r\n            (d)=>`${rootDir}/attribution/dataset-example${d+1}.png`);\r\n\r\n      attribution\r\n      .append('g')\r\n      .selectAll('rect')\r\n      .data(ids.slice(0,4))\r\n      .enter()\r\n      .append('rect')\r\n      .attr('id', (d) => `att_${number}_${d}`)\r\n      .attr('x', (d) => 7+parseInt(d/2)*40)\r\n      .attr('y', (d) => (d % 2) * 40)\r\n      .attr('width', 38)\r\n      .attr('height', 38)\r\n      .style(\"fill\", // use square size image\r\n                (d)=>`url(#att_${number}_${d})`)\r\n      .style('filter',`opacity(${value*20}%)`)\r\n    };\r\n    drawGrid();\r\n\r\n  },[value]);\r\n  return (\r\n        <div className=\"Target-FV\">\r\n          <svg id={'attribution_'+number} className='attribution'></svg>\r\n          <RangeSlider className='slider'\r\n                value={value}\r\n                min='1'\r\n                max='5'\r\n                variant='info'\r\n                onChange={changeEvent => {\r\n                    setValue(changeEvent.target.value)\r\n                    setResult(number)\r\n                }}\r\n            />\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Attribution;\r\n","import './Question.css';\r\nimport React from 'react';\r\nimport * as d3 from 'd3';\r\nimport 'react-bootstrap';\r\nimport Attribution from './Attribution.js';\r\n\r\nfunction Question({number,setAnswer,rootDir}) {\r\n  let ids = Array.from(Array(9).keys());\r\n\r\n  React.useEffect(() => {\r\n\r\n\r\n    async function drawGrid() {\r\n      // TODO draw the map using d3\r\n      const svg = d3\r\n      .selectAll(`#Options_${number}`);\r\n      let w = 90;\r\n      let h = 90;\r\n\r\n      function itemClick(){\r\n        d3\r\n          .select(this)\r\n          .classed('clicked',!d3.select(this).classed('clicked'))\r\n          \r\n        setAnswer(number, d3.select(this).data()[0]+1)\r\n        \r\n      }  \r\n\r\n      svg\r\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n        .style(\"background-color\", \"transparent\")\r\n        .attr(\"viewBox\", `0 0 ${w} ${h}`)\r\n        .classed(\"svg-content\", true)\r\n        .selectAll('*').remove();\r\n\r\n        svg.append(\"defs\")\r\n        .selectAll(\"pattern\")\r\n        .data(ids)\r\n        .enter()\r\n        .append('pattern')\r\n        .attr(\"id\", (d)=>`img_${number}_${d}`)\r\n        .attr(\"width\",\"100%\")\r\n        .attr('height',\"100%\")\r\n        .attr(\"patternContentUnits\", \"objectBoundingBox\")\r\n        .append(\"image\")\r\n        .attr(\"height\",\"1\") // value is ratio : \"image height /pattern height\"\r\n        .attr(\"width\",\"1\") // value is ratio : \"image widht /pattern width\"\r\n        .attr(\"xlink:href\", // use square size image\r\n            (d)=>`${rootDir}/options/option${d+1}.png`);\r\n\r\n      svg.append('g')\r\n      .selectAll('rect')\r\n      .data(ids)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('id', (d) => `rect_${number}_${d}`)\r\n      .attr('x', (d) => parseInt(d/3)*30+1)\r\n      .attr('y', (d) => (d % 3) * 30+1)\r\n      .attr('width', 28)\r\n      .attr('height', 28)\r\n      .style(\"fill\", // use square size image\r\n                (d)=>`url(#img_${number}_${d})`)\r\n      .on('click', itemClick)\r\n    };\r\n    drawGrid();\r\n\r\n  },[]);\r\n  return (\r\n    <div className=\"Question\">\r\n      <div className='Question-Title'>\r\n        <text className='Question-Text'>Question {number}</text>\r\n      </div>\r\n      <div className='Container'>\r\n      <Attribution number={number} rootDir={rootDir}></Attribution>\r\n        <div className=\"Option-box\">\r\n          <svg id={'Options_'+number} className='Options'></svg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import './App.css';\nimport Question from './Question.js';\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  // let nueron_list = [203, 322, 333, 414]\n\n  let nueron_list = [132, 210, 233, 291, 355, 356, 360, 577, 660, 735, 840, 862, 904, 906, 908, 997, 1173, 1526, 1591, 1797, 1895, 1943, 1954, 1994, 1997, 2031]\n  let expRootDir = 'full_spec11/'\n  let targetTestDir = '/Madry'\n  let rootDirs = nueron_list.map(item => {\n    return expRootDir+'nueron_' + (item) + targetTestDir;\n  })\n\n  let questionNum = rootDirs.length\n  const [totalInfo, setTotalInfo] = useState(\n    Array.from(Array(questionNum).keys()).reduce((acc, curr) => (acc[curr + 1] = [], acc), {})\n  )\n\n  let defaultInfo = {\n    'name': '',\n    'age': '',\n    'gender': '',\n    'major': '',\n    'backgrounds': ''\n  }\n\n  const [userInfo, setUserInfo] = useState(defaultInfo)\n\n  function updateInfoToggle(number, data) {\n    setTotalInfo(prevState => ({\n      ...prevState,\n      [number]: prevState[number].includes(data) ? prevState[number].filter(d => d !== data) : [...prevState[number], data]\n    })\n    );\n  }\n\n  function updateUserInfo(key, event) {\n    setUserInfo(prevState => ({\n      ...prevState,\n      [key]: event.target.value\n    }))\n\n  }\n\n  function download(content, fileName, contentType) {\n    const a = document.createElement(\"a\");\n    const file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  function submit() {\n    let notOK = [] // totalInfo update 할때 notOK 계산해 놓는게 나으려나\n\n    Object.keys(totalInfo).forEach(function (item) {\n      if (totalInfo[item].length !== 3) {\n        notOK.push(item)\n      }\n    })\n\n    if (notOK.length == 0) {\n      download(JSON.stringify(userInfo), \"Experiment2_\" + userInfo[\"name\"] + \".json\", \"text/plain\");\n    }\n\n    return alert(\n      JSON.stringify(userInfo) + '\\n'\n      + `${notOK.length > 0 ? 'pick only 3 options: ' + notOK : 'All Done!!!!'}`\n      + '\\n' + JSON.stringify(totalInfo)\n    )\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Interpretability Test (Experiment 2)\n        </p>\n      </header>\n\n      <div className='userInfoForm'>\n        <div className='Form-above'>\n          <div className='Form-Left'>\n            {Object.keys(defaultInfo).slice(0, 2).map(key => {\n              console.log(key)\n              return (<div className='Input-Row'>\n                <text style={{ width: '60px' }}> {key} </text>\n                <input\n                  type=\"text\"\n                  value={userInfo[key]}\n                  onChange={event => updateUserInfo(key, event)}\n                />\n              </div>);\n            })}\n\n          </div>\n\n          <div className='Form-Left'>\n            {Object.keys(defaultInfo).slice(2, 4).map(key => {\n              console.log(key)\n              return (<div className='Input-Row'>\n                <text style={{ width: '60px' }}> {key} </text>\n                <input\n                  type=\"text\"\n                  value={userInfo[key]}\n                  onChange={event => updateUserInfo(key, event)}\n                />\n              </div>);\n            })}\n\n          </div>\n\n        </div>\n\n        <div className='Input-full-Row'>\n          <text style={{ width: '100px' }}> {Object.keys(userInfo).slice(-1)[0]} </text>\n          <textarea\n            type=\"text\"\n            value={userInfo[Object.keys(userInfo).slice(-1)[0]]}\n            onChange={event => updateUserInfo(Object.keys(userInfo).slice(-1)[0], event)}\n          />\n        </div>\n      </div>\n\n      {Array.from(Array(questionNum).keys()).map(item => {\n        return (<div>\n          <Question number={item + 1} setAnswer={updateInfoToggle} rootDir={rootDirs[item]}></Question>\n        </div>);\n      })}\n\n      <button onClick={submit}>Submit</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}